---
ID: "2a56e54d-c1aa-4900-b99a-bf4249b4b896"
Parent: "97909803-e651-41e4-a13a-ba1a831685b3"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SPE/Samples/Getting Started/User Interaction/Read-Variable - Sample with input validation"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    <#
        .SYNOPSIS
            Prompts user for 3 values and validates them in 3 different ways, then outputs them to the Host.
    
    	.DESCRIPTION
            Example scripts that prompts user for 3 values and validates them in 3 different ways, then outputs them to the Host.
    
            $userName uses simplest "Mandatory" validator that only checks that string is not empty - this validator works only on some fields.
            $password is validated in the global validator at the end of the command.
            $description is validated by a local parameter "Validator" script block that only checks a single entry        
            $minPassLength is a number that is passed to validator as a parameter and used for password length validation
    
        .NOTES
            Adam Najmanowicz - https://gist.github.com/AdamNaj/37ad58e1a9350604e4815ca586acf39e
    #>
    
    $minPassLength = 6
    
    $result = Read-Variable -Parameters `
        @{ Name = "userName"; Value=""; Title="UserName"; Placeholder="User name goes here"; Mandatory=$true},
        @{ Name = "password"; Value=""; Title="Password"; Editor="password"; Placeholder="Password goes here"},
        @{ Name = "description"; Value=""; Title="Description"; Lines=3; Placeholder="User description"; Validator={ 
            if([string]::IsNullOrEmpty($variable.Value)){
                $variable.Error = "Please provide a description."
            }}} `
        -Description "This Dialog shows how to provide a validator for values" `
        -Title "Password entry" -Width 450 -Height 450 -OkButtonName "Proceed" -CancelButtonName "Abort" -ShowHints `
        -Validator { 
            $pass = $variables.password.Value;
            if($pass.Length -ge $minPassLength)
            {
            	$valErr = @()
        		if (-not ($pass -match "[^a-zA-Z0-9]")) #check for special chars
        	    {
        	        $valErr += "special character"
        	    }
        		if (-not ($pass -match "[0-9]"))
        		{ 
        	        $valErr += "number"
        		}
        		if (-not ($pass -cmatch "[a-z]"))
        		{ 
        	        $valErr += "lowercase character"
        		}
        		if (-not ($pass -cmatch "[A-Z]"))
        		{ 
        	        $valErr += "uppercase character"
        		}
        		if($valErr.Count -gt 0){
        		    $variables.password.Error = "Password must have at least one: " + ( $valErr -Join ", ")
        		}
            }
            else
            {
                $variables.password.Error = "Password must be at least " + $minPassLength + " characters long"
            }
        } `
        -ValidatorParameters @{minPassLength = $minPassLength}
    
    $userName
    $password
    $description
    
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20161021T123001
