---
ID: "147658cc-5c08-4292-bdcc-25b2bd571d0a"
Parent: "910ed90a-e675-42d5-bb2e-0b9fc293b552"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SPE/Core/X-UnitTests/Platform/Cloning/Clones and Notifications"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Module -Name Pester
    
    Describe "Cloning cmdlets" {
        BeforeEach {
    
            $rootPath = "master:\content\CloneTest"
            $originName = "origin"
            $originPath = "$rootPath\$originName"
            $cloneName = "clone"
            $clonePath = "$rootPath\$cloneName"
            $originChild1SubPath = "child1"
            $originChild2SubPath = "child2"
            $originChild3SubPath = "child1\child3"
            $originChild4SubPath = "child1\child4"
            
            if(Test-Path -Path $rootPath) {
                Remove-Item -Path $rootPath -Recurse
            }
            
            New-Item $rootPath -ItemType "Common/Folder" | Out-Null
            New-Item "$originPath" -ItemType "Sample/Sample Item" | Out-Null
            New-Item "$originPath\$originChild1SubPath" -ItemType "Sample/Sample Item" | Out-Null
            New-Item "$originPath\$originChild2SubPath" -ItemType "Sample/Sample Item" | Out-Null
            New-Item "$originPath\$originChild3SubPath" -ItemType "Sample/Sample Item" | Out-Null
            New-Item "$originPath\$originChild4SubPath" -ItemType "Sample/Sample Item" | Out-Null
            
            Add-ItemLanguage "$originPath" -Language * -TargetLanguage "pl-PL" -Recurse
            
            New-ItemClone -path $originPath -Destination (gi $rootPath) -Name $cloneName -Recursive | Out-Null
    
        }
        AfterEach {
            if(Test-Path -Path $rootPath) {
                Remove-Item -Path $rootPath -Recurse -Permanently
            }
        }
        Context "Get-ItemCloneNotification and Receive-ItemCloneNotification" {
            It "Should receive Field changed notification and reject it" {
                $clone = Get-Item $clonePath
                $clone.Title = "clone title"
                $origin = Get-Item $originPath
                $origin.Title = "origin title"
                @(Get-Item $clonePath | Get-ItemCloneNotification -NotificationType FieldChangedNotification).Count | Should Be 1
                @(Get-Item $clonePath | Get-ItemCloneNotification).Count | Should Be 1
            
                # Test Receive side of the notification
            
                # could not test Accept in the following line as the FieldChangedNotification.Accept contains a call
                # to Context.ClientPage.SendMessage... silly
                (Get-Item $clonePath).Title | Should Be "clone title"
                Get-Item $clonePath | Get-ItemCloneNotification | Receive-ItemCloneNotification -Action Reject
                (Get-Item $clonePath).Title | Should Be "clone title"
                @(Get-Item $clonePath | Get-ItemCloneNotification).Count | Should Be 0
                
            }
            It "Should get item moved notifications" {
                # move child4 from under child1 to child2
                Move-Item "$originPath\$originChild4SubPath" -Destination "$originPath\$originChild2SubPath" | Out-Null
    
                # original place should get ItemMovedChildRemovedNotification and only that one
                @(Get-Item "$clonePath\$originChild1SubPath" | Get-ItemCloneNotification -NotificationType ItemMovedChildRemovedNotification).Count | Should Be 1
                @(Get-Item "$clonePath\$originChild1SubPath" | Get-ItemCloneNotification).Count | Should Be 1
    
                # moved item should get ItemMovedNotification and only that one
                @(Get-Item "$clonePath\$originChild1SubPath\child4" | Get-ItemCloneNotification -NotificationType ItemMovedNotification).Count | Should Be 1
                @(Get-Item "$clonePath\$originChild1SubPath\child4" | Get-ItemCloneNotification).Count | Should Be 1
            }
            It "Should get child created notification and accept it" {
                
                # create a new child under root
                New-Item "$originPath\child5" -ItemType "Sample/Sample Item" | Out-Null
                
                # original place should get ChildCreatedNotification and only that one
                @(Get-Item "$clonePath" | Get-ItemCloneNotification -NotificationType ChildCreatedNotification).Count | Should Be 1
                @(Get-Item "$clonePath" | Get-ItemCloneNotification).Count | Should Be 1
                
                #Accept the change
                Test-Path "$clonePath\child5" | Should Be $false
                Get-Item $clonePath | Get-ItemCloneNotification | Receive-ItemCloneNotification -Action Accept
                Test-Path "$clonePath\child5" | Should Be $true
                @(Get-Item $clonePath | Get-ItemCloneNotification).Count | Should Be 0
            }
            It "Should convert clone to a full item" {
                
                # should be clone
                (Get-Item $clonePath).IsClone | Should Be $true
                # unclone
                ConvertFrom-ItemClone "$clonePath"
                # should be uncloned
                (Get-Item $clonePath).IsClone | Should Be $false
                
                # unclone tree - should return 1 error as root is already uncloned
                ConvertFrom-ItemClone "$clonePath" -Recurse -ErrorVariable testErrors -ErrorAction SilentlyContinue
                $testErrors.Count | Should Be 1
                $testErrors[0].Exception.Message | Should BeLike "*is not a clone.*"
            }
        }
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20170307T173030
