---
ID: "23f746ec-809e-4d33-9055-f33cba1225ca"
Parent: "e22d066a-04d0-4799-9dad-edd9eb07c2b2"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Functions/Remoting
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    <# 
      Sitecore PowerShell Remoting.
    
      Sample Execute Script Block on a Sitecore Server:
        Set-SitecoreConfiguration 'http://hostname' 'admin' 'b'
        Invoke-SitecoreScript { get-item master:\content\ } @{name = "value"}
    
      Sample upload local C:\image.png to a Sitecore Server to "/sitecore/media library/Path/an_image.png" path:
        Set-SitecoreConfiguration 'http://hostname' 'admin' 'b'
        Get-Item C:\image.png | Upload-SitecoreFile -remotePath "Path\an_image.png"
        
      Sample upload remote "/sitecore/ media library/Path/an_image.png" from local C:\image.png:
        Set-SitecoreConfiguration 'http://hostname' 'admin' 'b'
        Upload-SitecoreFile -remotePath "Path\an_image" -File C:\image.jpg
    
    Naturally update the host name, credentials and parameters with the ones meeting your use case.
        
    #>
    
    function Set-SitecoreConfiguration {
        [CmdletBinding()]
        param(
            [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
            [ValidateNotNullOrEmpty()]
            [string]$SitecoreHost,
    
            [Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
            [ValidateNotNullOrEmpty()]
            [string]$User,
            
            [Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
            [ValidateNotNullOrEmpty()]
            [string]$Password
        )
        $URI = $SitecoreHost + "/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx";
        $GLOBAL:SpeRemoteProxy = New-WebServiceProxy -Uri $URI
        $GLOBAL:SpeRemoteUser = $User;
        $GLOBAL:SpeRemotePassword = $Password;
    }
    
    function Invoke-SitecoreScript {
        [CmdletBinding()]
        param(
            [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
            [ValidateNotNullOrEmpty()]
            [ScriptBlock]$Command,
            
            [Parameter(Position=1, ValueFromPipeline=$true)]
            [Hashtable]$Params = @{noParameters=$true}
        )
    	
        $sb = New-Object System.Text.StringBuilder;
        $settings = New-Object System.Xml.XmlWriterSettings -Property @{CloseOutput = $true; Encoding = [System.Text.Encoding]::UTF8; Indent = $false; OmitXmlDeclaration = $true};
        $xw = [System.Xml.XmlWriter]::Create($sb, $settings);
        $type = $type = [PSObject].Assembly.GetType("System.Management.Automation.Serializer");
        $ctor = $type.GetConstructor("instance,nonpublic", $null, @([Xml.XmlWriter]), $null);
        $serializer = $ctor.invoke($xw);
        $method = $type.GetMethod("Serialize", "invokemethod,nonpublic,instance", $null, @([object]), @());
        $done = $type.GetMethod("Done", [System.Reflection.BindingFlags]"nonpublic,instance");
        $method.Invoke($serializer, @($Params)) | Out-Null;
        $done.Invoke($serializer, @()) | Out-Null;
        $cliXmlArgs = $sb.ToString();
        $xw.Close();
    
        $reply = $GLOBAL:SpeRemoteProxy.ExecuteScriptBlock($GLOBAL:SpeRemoteUser, $GLOBAL:SpeRemotePassword, $Command, $cliXmlArgs);
    
        $xmlString = $reply -replace "\n", "" -replace "\r",""
        $sr = New-Object System.IO.StringReader $xmlString
        $xr = New-Object System.Xml.XmlTextReader $sr
        $type = $type = [PSObject].Assembly.GetType("System.Management.Automation.Deserializer")
        $ctor = $type.GetConstructor("instance,nonpublic", $null, @([Xml.XmlReader]), $null)
        $deserializer = $ctor.Invoke($xr)
        $method = $type.GetMethod("Deserialize", "nonpublic,instance", $null, @(), @())
        $done = $type.GetMethod("Done", [System.Reflection.BindingFlags]"nonpublic,instance")
        while (!$done.Invoke($deserializer, @()))
        {
            try {
                $value = $method.Invoke($deserializer, @())
                return $value
            } catch [Exception] {
                write-warning "Error while de-serializing string: $($error[0])"
                break;
            }
        }
        $xr.Close()
        $sr.Dispose()
    }
    
    function Upload-SitecoreFile {
        [CmdletBinding()]
        param(
            [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
            [ValidateNotNullOrEmpty()]
            [string]$File,
            
            [Parameter(Position=1)]
    		[ValidateNotNullOrEmpty()]
            [String]$RemotePath,
    
            [Parameter(Position=2)]
            [String]$Database = "master",
    
            [Parameter(Position=3)]
            [String]$Language = "en"
        )
    	
        $bytes = [System.IO.File]::ReadAllBytes($file);
        $reply = $GLOBAL:SpeRemoteProxy.UploadFile($GLOBAL:SpeRemoteUser, $GLOBAL:SpeRemotePassword, $RemotePath, $bytes, $Database, $Language);
    }
    
    function Download-SitecoreFile {
        [CmdletBinding()]
        param(
            [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
            [ValidateNotNullOrEmpty()]
            [string]$File,
            
            [Parameter(Position=1)]
    		[ValidateNotNullOrEmpty()]
            [String]$RemotePath,
    
            [Parameter(Position=2)]
            [String]$Database = "master",
    
            [Parameter(Position=3)]
            [String]$Language = "en"
        )
    	
        $bytes = $GLOBAL:SpeRemoteProxy.DownloadFile($GLOBAL:SpeRemoteUser, $GLOBAL:SpeRemotePassword, $RemotePath, $Database, $Language);
        if(-not(test-path $file))
        {
            New-Item -ItemType File -Path $File
        }
    
        $FileName = Convert-Path -path $File
        [System.IO.File]::WriteAllBytes($FileName, $bytes);
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20131117T204733
