---
ID: "b6578e29-5717-4207-9f3d-ffbb9c583f91"
Parent: "9be73650-a188-4802-a68e-e720db54c5e9"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Internal/Integrations/Content Editor Ribbon
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: Office/32x32/tab_pane.png
- ID: "1c76313e-3c8c-4807-a826-135d10c39299"
  Hint: ShowRule
  Type: Rules
  Value: <ruleset />
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    $stripsPath = 'core:\content\Applications\Content Editor\Ribbons\Strips'
    
    $roots = Get-SpeModuleFeatureRoot "ContentEditorRibbon"
    
    
    #Remove non existing scripts from Control Panel
    Write-Host "- Purging Content Editor ribbon entries for non existing scripts and disabled modules" -ForegroundColor Cyan
    Write-Progress -Activity "Content Editor Ribbon" -CurrentOperation "Removing buttons for deleted scripts"
    Get-ChildItem $stripsPath | ForEach-Object {
    	$strip = $_;
    	Get-ChildItem $strip.ProviderPath | ForEach-Object {
    		$chunk = $_;
    		$chunkName = $_.Name;
    		if ($chunk.TemplateName -eq "Reference") {
    			$chunk = Get-Item "core:/" -Id $chunk.Reference
    		}
    		Get-ChildItem $chunk.ProviderPath | ForEach-Object {
    			$panel = $_
    			if ($panel.TemplateName -eq "Panel" -and $panel.Type -like "*Cognifide.PowerShell.Client.Controls.ContentEditorRibbonPanel*") {
    				$panel | Remove-Item -Recurse
    			}
    		}
    
    		if ($chunk.Children.Count -eq 0)
    		{
    			Write-Host " - Removing Chunk '$($chunk.Name)' from strip '$($strip.Name)'" -f y
    			$chunk | Remove-Item
    		}
    	}
    	if ($strip.Children.Count -eq 0 -and $strip.Name -ne 'My Toolbar')
    	{
    		Write-Host " - Removing Strip '$($strip.Name)'" -f y
    		$strip | Remove-Item
    	}
    }
    
    # Re-creating buttons
    Write-Host "- Adding Content Editor ribbon entries for new scripts and modules" -ForegroundColor Cyan
    Write-Progress -Activity "Content Editor Ribbon" -CurrentOperation "Adding buttons for new scripts" -PercentComplete 50
    
    foreach ($root in $roots) {
    	$scriptLibPath = "$($root.Database.Name):$($root.Paths.Path)"
    
    	#Adding missing strips
    	Get-ChildItem $scriptLibPath | ? { $_.TemplateName -eq "PowerShell Script Library" } | % {
    		$scriptLibrary = $_;
    		$strip = Get-Item "$stripsPath/$($scriptLibrary.Name)" -ErrorAction SilentlyContinue
    		if ($strip -eq $null) {
    			Write-Host " - Adding Strip '$($scriptLibrary.Name)'." -f Green
    			$strip = New-Item -Path $stripsPath -Name $scriptLibrary.Name -ItemType "System/Ribbon/Strip"
    			$strip.Header = $scriptLibrary.Name
    		}
    
    		# Adding missing chunks
    		Get-ChildItem $scriptLibrary.ProviderPath | ForEach-Object {
    			$chunkLibrary = $_
    			$chunk = Get-Item "$stripsPath/$($scriptLibrary.Name)/$($chunkLibrary.Name)" -ErrorAction SilentlyContinue
    			if ($chunk -eq $null) {
    				Write-Host " - Adding Chunk '$($chunkLibrary.Name)'." -f Green
    				$chunk = New-Item -Path core: -Parent $strip -Name $chunkLibrary.Name -ItemType "System/Ribbon/Chunk"
    				$chunk.Header = $chunkLibrary.Name
    			}
    
    			if ($chunk.TemplateName -eq "Reference") {
    				$chunk = Get-Item "core:/" -Id $chunk.Reference
    				Write-Verbose " - Translating reference '$stripsPath/$($scriptLibrary.Name)/$($chunkLibrary.Name)' -> $($chunk.ProviderPath)" #-ForegroundColor Blue
    			} else {
    				Write-Verbose " - Using chunk directly '$($chunk.ProviderPath)'" #-ForegroundColor Blue
    			}
    
    			$panel = $null;
    			$smallCount = 0
    			#Creating Script references
    			Get-ChildItem $chunkLibrary.ProviderPath | ForEach-Object {
    				$script = $_
    				if ($script.TemplateName -eq "PowerShell Script" -or $script.TemplateName -eq "PowerShell Script Library") {
    
    					$name = $script.Name;
    					$buttonTemplate = ""
    					$isSmall = $false;
    
    					if ($script.Name.Contains("$")) {
    						$nameTypeArray = $script.Name.Split('$')
    						$name = $nameTypeArray[1].Trim();
    						$buttonTemplate = $nameTypeArray[0].Trim();
    					}
    					$isSmall = $buttonTemplate -like "*Small*"
    					$isCombo = $buttonTemplate -like "*Combo*" -or $script.HasChildren
    
    					$buttonTemplate = "System/Ribbon/"
    					if($isSmall){
    					    $buttonTemplate += "Small "
    					} else {
                            $buttonTemplate += "Large "
    					}
    					
    					if($isCombo){
    					    $buttonTemplate += "Menu Combo Button"
    					} else {
                            $buttonTemplate += "Button"
    					}
    
    					if (!$panel -or (($smallCount % 2) -eq 1 -and !$isSmall)) {
    						$panel = New-Item -Path "core:" -Parent $chunk -Name $name -ItemType "System/Ribbon/Panel"
    						$panel.Type = "Cognifide.PowerShell.Client.Controls.ContentEditorRibbonPanel,Cognifide.PowerShell"
    						$panel.__Sortorder = $script.__Sortorder
    						$smallCount = 0
    						Write-Host " - Adding Panel '$($panel.Name)' to Chunk '$($chunk.Name)'." -f Green
    					}
    					$button = New-Item -Path "core:" -Name $name -Parent $panel -ItemType $buttonTemplate
    					Write-Host " - Adding Script '$($script.Name)' to Chunk '$($chunk.Name)'." -f Green
    
    					$button.__Icon = $script.__Icon;
    					$button.Icon = $script.__Icon;
    					$button.Header = $name;
    					$button.__Sortorder = $script.__Sortorder;
    					if (Get-Member -InputObject $button -Name "Click" -MemberType Properties) {
    						$button.Click = "item:executescript(id=`$ItemID,script=$($script.ID),scriptDb=$($script.Database.Name))"
    					}
    					if (Get-Member -InputObject $button -Name "Command" -MemberType Properties) {
    						$button.Command = "item:executescript(id=`$ItemID,script=$($script.ID),scriptDb=$($script.Database.Name))"
    					}
    
    					#build menu
    					if ($isCombo) {
    						$button.Menu = $button.Paths.Path
    						Get-ChildItem $script.ProviderPath | % {
    							$itemScript = $_
    							$menuItem = New-Item -Path "core:" -Parent $button -Name $itemScript.Name -ItemType 'System/Menus/Menu item'
    							Write-Host " - Adding Menu Item Script '$($menuItem.Name)' to Dropdown Button '$($button.Name)'." -f Green
    
    							$menuItem.__Icon = $itemScript.__Icon;
    							$menuItem.Icon = $itemScript.__Icon;
    							$menuItem."Display name" = $itemScript.Name;
    							$menuItem.__Sortorder = $itemScript.__Sortorder;
    							$menuItem.Message = "item:executescript(id=`$ItemID,script=$($itemScript.ID),scriptDb=$($itemScript.Database.Name))"
    
    						}
    					}
    					if ($isSmall) {
    						$smallCount++
    					}
    				}
    			}
    		}
    	}
    }
    
    Write-Progress -Activity "Content Editor Ribbon" -CurrentOperation "Finishing up" -PercentComplete 100
    
- ID: "f62c67b4-28b6-4a6f-91cb-db78cf054f4e"
  Hint: EnableRule
  Type: Rules
  Value: <ruleset />
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20131001T173321
