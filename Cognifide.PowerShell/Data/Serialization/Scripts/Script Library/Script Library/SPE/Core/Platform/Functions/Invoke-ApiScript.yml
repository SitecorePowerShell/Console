---
ID: "f42f88f8-76fb-4158-8acd-cd57722c0351"
Parent: "e22d066a-04d0-4799-9dad-edd9eb07c2b2"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Functions/Invoke-ApiScript"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    <#
        .SYNOPSIS
            Invokes a scriptblock with the specified arguments and returns a JSON object.
            
        .DESCRIPTION
            The Invoke-ApiScript command invokes a scriptblock with the specified arguments and returns a JSON object.
            The response includes a status, message, timespan, timestamp, and results.
            
        .PARAMETER ScriptBlock
            Scriptblock containing the code to execute on the server.
            
        .PARAMETER Arguments
            Hashtable containing arguments for the command and the scriptblock. The hashtable can be accessed from within the scriptblock using $args.
            
            Supported arguments by the Invoke-ApiScript include:
            
            - limit = The number of results to return.
            - offset = The number of items to skip before returning results based on the limit.
            - fields = The comma separated list of property names that indicated what object properties should be included in the JSON object.
            - compress = The JSON object is compressed such that the unncessary whitespace is removed; beneficial when running remotely.
            
            The hashtable is also passed to the scriptblock and can be accessed using the $args object.
            
        .EXAMPLE
            The following invokes a scriptblock and wraps the results in a nicely formatted JSON object.
            
            PS master:\> Import-Function Invoke-ApiScript
            PS master:\> Invoke-ApiScript -ScriptBlock { 
                @(Get-Item -Path master:\content\home) + @(Get-ChildItem -Path master:\content\home -Recurse)
            } -Arguments @{limit=2;fields="name","id"}
            
            
            JSON output:
                    
            {
                "Status":  "Success",
                "Message":  "The request completed successfully.",
                "Timespan":  "0:00:00.057338",
                "Timestamp":  "2015-07-12T03:19:17.9633436-05:00",
                "Results":  [
                                {
                                    "Name":  "Home",
                                    "ID":  "{110D559F-DEA5-42EA-9C1C-8A5DF7E70EF9}"
                                },
                                {
                                    "Name":  "sample item 1",
                                    "ID":  "{39A657C0-103A-4EDD-89C6-D0C3AFACA192}"
                                }
                            ]
            }
            
        .EXAMPLE
            Import-Function Invoke-ApiScript
            Invoke-ApiScript -ScriptBlock { 
                $args.customProperty2
            } -Arguments @{compress=$true;customProperty1=$false;customProperty2="SPE"}
            
            
            JSON output:
            
            {"Status":"Success","Message":"The request completed successfully.","Timespan":"0:00:00.0068324","Timestamp":"2015-07-14T16:39:31.1988765-05:00","Results":"SPE"}        
        
        .LINK
            http://blog.najmanowicz.com/2015/04/13/rapid-api-prototyping-for-sitecore-with-powershell-extensions/
            
        .NOTES
            Michael West
    #>
    
    $HttpContext = [System.Web.HttpContext]::Current;
    if ($HttpContext){
        $HttpContext.Response.ContentType = "application/json";
    }
    
    function Invoke-ApiScript {
        param(
            [Parameter(Mandatory=$true, Position=0)]
            [scriptblock]$ScriptBlock,
            
            [Parameter()]
            [hashtable]$Arguments
        )
        Set-HostProperty -HostWidth ([int]::MaxValue)
        $status = "Success"
        $message = "The request completed successfully."
        $error = $null
        
        $fields = "*"
        [int]$offset = 0
        [int]$limit = 0
        [bool]$compress = $false
        [int]$depth = 2
        
        if($Arguments) {
            if($Arguments["fields"]) {
                $fields = $Arguments["fields"].Trim('(',')').Split(',')
            }
            
            if($Arguments["offset"]) {
                [int]::TryParse($Arguments["offset"], [ref]$offset) > $null
            }
            
            if($Arguments["limit"]) {
                [int]::TryParse($Arguments["limit"], [ref]$limit) > $null
            }
            
            if($Arguments["compress"]) {
                [bool]::TryParse($Arguments["compress"], [ref]$compress) > $null
            }
            
            if($Arguments["depth"]) {
                [int]::TryParse($Arguments["depth"], [ref]$depth) > $null
            }
        }
        
        $watch = New-Object System.Diagnostics.Stopwatch
        $watch.Start()
        
        try {
            $items = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList ([PSCustomObject]$Arguments)        
        } catch {
            $status = "Failed"
            $message = "There was an error while executing the script."
            $error = "Error at line:$($_.InvocationInfo.ScriptLineNumber), char:$($_.InvocationInfo.OffsetInLine). " + $_.Exception.Message
        }
    
        $watch.Stop()
        
        if($fields -gt 0) {
            $items = $items | Select-Object -Property $fields
        }
        
        if($offset -gt 0) {
            $items = $items | Select-Object -Skip $offset
        }
        
        if($limit -gt 0) {
            $items = $items | Select-Object -First $limit
        }
        
        if($depth -lt 1) {
            $depth = 2
        }
        
        [ordered]@{
            Status = $status
            Message = $message
            Timespan = $watch.Elapsed.ToString("g")
            Timestamp = [datetime]::UtcNow.ToString("yyyy-MM-ddTHH\:mm\:ss.fffffffzzz")
            Results = $items
            Error = $error
        } | ConvertTo-Json -Compress:$compress -Depth $depth
    }
- ID: "ba3f86a2-4a1c-4d78-b63d-91c2779c1b5e"
  Hint: __Sortorder
  Value: 650
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20150420T012927
