---
ID: "22c47b26-223f-4d5a-b760-9bb3c711af9e"
Parent: "e22d066a-04d0-4799-9dad-edd9eb07c2b2"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Functions/Compress-Archive"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    <#
        .SYNOPSIS
            Creates a new archive, or zipped file, from specified files and folders.
            
        .DESCRIPTION
            The Compress-Archive command creates a new zipped (or compressed) archive file from one or more specified files or folders. An archive file allows multiple files to be packaged, and optionally compressed, into a single zipped file for easier distribution and storage. An archive file can be compressed by using the compression algorithm specified by the CompressionLevel parameter.
            
        .PARAMETER CompressionLevel
            Specifies how much compression to apply when you are creating the archive file. Faster compression requires less time to create the file, but can result in larger file sizes. 
            The default value is Optimal. If this parameter is not specified, the command uses the default value, Optimal.
            
            The following are valid values for this parameter.
            - Fastest : Use the fastest compression method available to decrease processing time; this can result in larger file sizes.
            - NoCompression : Do not compress the source files.
            - Optimal : Processing time is dependent on file size.
            
        .PARAMETER DestinationPath
            Specifies the path to the archive output file. This parameter is required. The specified DestinationPath value should include the desired name of the output zipped file; it specifies either the absolute or relative path to the zipped file. 
            If the file name specified in DestinationPath does not have a .zip file name extension, the cmdlet adds a .zip file name extension.
            
        .PARAMETER LiteralPath
            Specifies the path or paths to the files that you want to add to the archive zipped file. To specify multiple paths, and include files in multiple locations in your output zipped file, use commas to separate the paths.
            
        .PARAMETER Path
            Specifies the path or paths to the files that you want to add to the archive zipped file.
        
        .PARAMETER Update
            Updates an existing archive with the added files.
            
        .EXAMPLE
            The following compresses the specified images.
            PS C:\> Compress-Archive -LiteralPath "C:\image.png","C:\image2.png" –CompressionLevel Optimal -DestinationPath "C:\images.zip"
    
        .EXAMPLE
            The following compresses an entire directory maintaining the folder structure.
            
            PS C:\> Compress-Archive -Path "C:\Images" –CompressionLevel Fastest -DestinationPath "C:\temp\bunchofimages"
    
        .EXAMPLE
            The following adds files to the compressed archive as a flat structure. The default name is archive.zip.
            
            PS C:\> Get-ChildItem -Path "C:\Images" | Compress-Archive
        
        .INPUT
            You can pipe a string that contains a path to one or more files.
            
            - System.String
            
        .OUTPUT
            The output type is the type of the objects that the command emits.
            
            - System.IO.FileInfo
            
        .NOTES
            Michael West
        
        .NOTES
            Broke compatibility due to Windows PowerShell 5.0 and its inclusion of the same command.
            
        .LINK
            https://technet.microsoft.com/en-us/library/dn841358.aspx
    #>
    function New-EntryFromFile {
        #($Archive, $file.FullName, $File.Name, $CompressionLevel)
        [CmdletBinding()]
        param(
            [ValidateNotNullOrEmpty()]
            [System.IO.Compression.ZipArchive]$Archive,
            
            [ValidateNotNullOrEmpty()]
            [string]$FileName,
            
            [ValidateNotNullOrEmpty()]
            [string]$EntryName,
    
            [System.IO.Compression.CompressionLevel]$CompressionLevel = [System.IO.Compression.CompressionLevel]::Optimal
        )
        
        $sourceStream = [System.IO.File]::Open($FileName, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite)
        $entry = $Archive.CreateEntry($entryName, $CompressionLevel)
        $dateTime = [System.IO.File]::GetLastWriteTime($FileName)
        if($dateTime.Year -lt 1980 -or $dateTime.Year -gt 2107) {
            $dateTime = [datetime]"01/01/1980"
        }
        $entry.LastWriteTime = [System.DateTimeOffset]$dateTime
        
        $destinationStream = $entry.Open()
        $sourceStream.CopyTo($destinationStream)
        $destinationStream.Dispose()
        $sourceStream.Dispose()
        
        $entry
    }
    
    function Compress-Archive {
        [CmdletBinding(DefaultParameterSetName="Path")]
        param(
            [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, ParameterSetName="Path")]
            [ValidateNotNullOrEmpty()]
            [string[]]$Path,
            
            [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$false, ValueFromPipelineByPropertyName=$true, ParameterSetName="LiteralPath")]
            [Alias("PSPath")]
            [ValidateNotNullOrEmpty()]
            [string[]]$LiteralPath,
    
            [Parameter(Mandatory=$false, Position=1)]
            [ValidateNotNullOrEmpty()]
            [string]$DestinationPath=("$($SitecoreDataFolder)\archived\"),
            
            [System.IO.Compression.CompressionLevel]$CompressionLevel = [System.IO.Compression.CompressionLevel]::Optimal,
            
            [switch]$Update,
            
            [ValidateNotNullOrEmpty()]
            [string[]]$Include = "*"
        )
    
        begin {
            Add-Type -AssemblyName System.IO.Compression
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            
            $mode = [System.IO.Compression.ZipArchiveMode]::Create
            if($Update) {
                $mode = [System.IO.Compression.ZipArchiveMode]::Update
            }
            
            $name = [System.IO.Path]::GetFileName($DestinationPath)
            if(!$name) {
                Write-Verbose "Using the default filename archive.zip."
                $name = "archive.zip"
            }        
            if($name -notmatch "zip$") {
                Write-Verbose "Adding the extension .zip to the filename."
                $name += ".zip"
            }
            
            $directory = [System.IO.Path]::GetDirectoryName($DestinationPath)
            
            if(!(Test-Path -Path $directory)) {
                Write-Verbose "Creating a new directory at the specified path $($directory)"
                New-Item -Path $directory -ItemType directory > $null
            }
            
            $zipPath = (Join-Path -Path $directory -ChildPath $name)
            if(!$Update -and (Test-Path -Path $zipPath)) {
                Write-Verbose "Removing the the existing archive at the path $($zipPath)."
                Remove-Item -Path $zipPath
            }
            
            Write-Verbose "Opening the archive at the path $($zipPath) with mode $($mode)."
            $zipArchive = [System.IO.Compression.ZipFile]::Open($zipPath, $mode)
            
            function Add-FileEntry {
                [CmdletBinding()]
                param(
                    [System.IO.Compression.ZipArchive]$Archive,
                    [string]$Path
                )
                Write-Verbose $Path
                $file = New-Object System.IO.FileInfo (Resolve-Path -Path $Path).ProviderPath
                Write-Verbose "Adding the file $($file.Name) to the archive."
                New-EntryFromFile -Archive $Archive -FileName $file.FullName -EntryName $file.Name -CompressionLevel $CompressionLevel > $null
            }
            
            function Add-DirectoryEntry {
                [CmdletBinding()]
                param(
                    [System.IO.Compression.ZipArchive]$Archive,
                    [string]$Path
                )
                
                $directory = New-Object System.IO.DirectoryInfo (Resolve-Path -Path $Path).ProviderPath
                Write-Verbose "Adding the directory $($directory.FullName) to the archive."
                $zipArchive.CreateEntry($directory.Name + '\') > $null
                $items = Get-ChildItem -Path $directory -Recurse -Include $Include
                $dir = [Uri]($directory.Parent.FullName + '\')
                foreach($item in $items) {
                    $subdir = [Uri]($item.FullName + (@{$true="\";$false=""}[$item.PSIsContainer]))
                    $p = [Uri]::UnescapeDataString($dir.MakeRelativeUri($subdir).ToString().Replace('/',[System.IO.Path]::DirectorySeparatorChar).TrimStart("..\"))
                    if($item.PSIsContainer) {
                        $zipArchive.CreateEntry($p) > $null
                    } else {
                        if($Update -and $zipArchive.GetEntry($p)) {
                            Write-Verbose "Skipping the file $($item.FullName) because it already exists."
                            continue
                        }
                        
                        Write-Verbose "Adding the file $($item.FullName) to the archive."
                        New-EntryFromFile -Archive $zipArchive -FileName $item.FullName -EntryName $p -CompressionLevel $CompressionLevel > $null
                    }
                }    
            }
        }
        
        process {
            if($LiteralPath) {
                foreach($literal in $LiteralPath) {
                    if(Test-Path -Path $literal -PathType Leaf) {
                        Add-FileEntry -Path $literal -Archive $zipArchive
                    }
                }
            } elseif($Path) {
                foreach($p in $Path) {
                    if(Test-Path -Path $p) {
                        if(Test-Path -Path $p -PathType Leaf) {
                            Add-FileEntry -Path $p -Archive $zipArchive
                        } else {
                            Add-DirectoryEntry -Path $p -Archive $zipArchive
                        }
                    }
                }
            }
        }
        
        end {
            Write-Verbose "Completed adding entries to the archive."
            $zipArchive.Dispose()
            
            New-Object System.IO.FileInfo $zipPath
        }
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20140429T020908
