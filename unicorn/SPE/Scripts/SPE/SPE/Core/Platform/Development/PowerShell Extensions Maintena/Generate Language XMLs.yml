---
ID: "504fdcc3-df2d-4bd7-b456-9f9a33cd9fd0"
Parent: "01bb164c-5e8e-4c9b-941f-e5340bdd520c"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Development/PowerShell Extensions Maintenance/Generate Language XMLs
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    <#
        .SYNOPSIS
            Creates Sitecore XML language exports for Sitecore PowerShell items. Items are sourced via the Unicorn serialization configurations.
        
        .NOTES
    		Adam Najmanowicz, Alex Washtell
    #>
    
    $config = [Sitecore.Configuration.Factory]::GetConfiguration()
    $speSourceFolder = $config.sitecore."sc.variable" | 
        Where-Object { $_.Name -eq "speSourceFolder" } | 
        Select-Object -First 1 -Expand value
    $translationsFolder = "$($speSourceFolder)\Data\Translations\$($targetLanguage)"
    
    $srcLanguage = "en"
    $targetLanguage = "da"
    
    # Some fields are not marked as Shared, but we don't want them translated.
    $untranslatedFieldIds = @(
    	"{212B99DF-C246-46CE-9E51-86DB77E3BC97}",
    	"{29D3164D-DE97-4ACE-BCB4-83CB6954BEE3}"
    )
    
    # Some paths are of items we don't need to translate, such as those for internal use only
    $ignoredPaths = @(
        "/sitecore/system/Modules/PowerShell/Script Library/SPE/Core/X-UnitTests",
        "/sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Development",
        "/sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Functions",
        "/sitecore/system/Modules/PowerShell/Script Library/SPE/Core/Platform/Internal/Context Help",
        "/sitecore/system/Modules/PowerShell/Script Library/SPE/Training"
    )
    
    function Append-Attribute {
    	[CmdletBinding()]
    	param(
    		[Parameter(Position = 0)]
    		[System.Xml.XmlElement]$element,
    
    		[Parameter(Position = 1)]
    		[string]$Name,
    
    		[Parameter(Position = 2)]
    		[string]$Value
    	)
    	$Attribute = $xml.CreateAttribute($Name)
    	$Attribute.Value = $Value
    	$element.Attributes.Append($Attribute) | Out-Null
    }
    
    function Process-Field {
    	[CmdletBinding()]
    	param(
    		[ValidateNotNullOrEmpty()]
    		[Parameter()]
    		[item]$SourceItem,
    
    		[Parameter()]
    		[item]$TargetItem,
    
    		[Parameter()]
    		[string]$FieldName,
    
    		[Parameter()]
    		[xml]$xml,
    
    		[Parameter()]
    		[System.Xml.XmlElement]$sitecore,
    
    		[Parameter()]
    		[bool]$NotTranslated
    	)
    
    	$phrase = $xml.CreateElement("phrase")
    	$sitecore.AppendChild($phrase) | Out-Null
    
    	Append-Attribute $phrase "updated" $SourceItem.Fields["__Updated"]
    	Append-Attribute $phrase "fieldid" $fieldName
    	#Append-Attribute $phrase "fieldguid" $item.Fields[$fieldName].ID
    	Append-Attribute $phrase "itemid" $item.ID
    	Append-Attribute $phrase "key" $SourceItem.Name
    	Append-Attribute $phrase "path" $SourceItem.Paths.FullPath
    
    	$langValue = $xml.CreateElement($targetLanguage)
    	$phrase.AppendChild($langValue) | Out-Null
    	if (!$TargetItem -or !($TargetItem.$fieldName))
    	{
    		if ($NotTranslated) {
    			Write-Host Adding non-translatable for $($SourceItem.Paths.FullPath) -ForegroundColor Magenta
    
    			$langValue.InnerText = $($SourceItem.$fieldName)
    		} else {
    			Write-Host Translation missing for $($SourceItem.Paths.FullPath) -ForegroundColor Yellow
    
    			$langValue.InnerText = "** $($SourceItem.$fieldName) **"
    
    		}
    	}
    	else
    	{
    		$langValue.InnerText = $TargetItem.$fieldName
    	}
    }
    
    function Process-Item {
    	[CmdletBinding()]
    	param(
    		[Parameter(Mandatory = $true,ValueFromPipeline = $true)]
    		[ValidateNotNullOrEmpty()]
    		[item]$Item,
    
    		[Parameter()]
    		[switch]$Recurse = $false,
    
    		[Parameter()]
    		[xml]$MasterXml,
    
    		[Parameter()]
    		[System.Xml.XmlElement]$MasterSitecore,
    
    		[Parameter()]
    		[xml]$CoreXml,
    
    		[Parameter()]
    		[System.Xml.XmlElement]$CoreSitecore
    	)
    
    	process
    	{
    	    foreach ( $ignoredPath in $ignoredPaths )
    	    {
    	        if ($item.Paths.FullPath.StartsWith($ignoredPath))
    	        {
    	            Write-Host Skipping ignored path $($item.Paths.FullPath) -ForegroundColor Gray
    	            return
    	        }
    	    }
    
    		$db = $item.Database
    		$sourceItem = Get-Item $Item.ProviderPath -Language $srcLanguage
    		$targetItem = Get-Item $Item.ProviderPath -Language $targetLanguage
    
    		if ($item.Database.Name -eq "master") {
    			$xml = $MasterXml
    			$sitecore = $MasterSitecore
    		}
    		else
    		{
    			$xml = $CoreXml
    			$sitecore = $CoreSitecore
    		}
    
    		if ($Recurse) {
    			$children = Get-ChildItem $Item.ProviderPath
    			foreach ($child in $children) {
    				Process-Item -Item $child -Recurse -MasterXml $MasterXml -MasterSitecore $MasterSitecore -CoreXml $CoreXml -CoreSitecore $CoreSitecore
    			}
    		}
    
    		foreach ($field in $sourceItem.Fields)
    		{
    			if ($field.ShouldBeTranslated -and -not [string]::IsNullOrEmpty($field.Value))
    			{
    				Process-Field -SourceItem $sourceItem -TargetItem $targetItem -FieldName $field.Name -Xml $xml -sitecore $sitecore -NotTranslated:($untranslatedFieldIds -contains $field.ID)
    			}
    		}
    	}
    }
    
    function Write-TranslationFile
    {
    	[CmdletBinding()]
    	param(
    		[Parameter(Mandatory = $true,ValueFromPipeline = $true)]
    		[ValidateNotNullOrEmpty()]
    		[item]$Item,
    
    		[Parameter(Mandatory = $true)]
    		[string]$Path,
    
    		[Parameter(Mandatory = $true)]
    		[string]$Prefix
    	)
    
    	begin {
    		[xml]$xmlCore = New-Object System.Xml.XmlDocument
    		$sitecoreCore = $xmlCore.CreateElement("sitecore")
    		$xmlCore.AppendChild($sitecoreCore) | Out-Null
    
    		[xml]$xmlMaster = New-Object System.Xml.XmlDocument
    		$sitecoreMaster = $xmlMaster.CreateElement("sitecore")
    		$xmlMaster.AppendChild($sitecoreMaster) | Out-Null
    	}
    
    	process {
    		$Item | Process-Item -MasterXml $xmlMaster -MasterSitecore $sitecoreMaster -CoreXml $xmlCore -CoreSitecore $sitecoreCore
    	}
    
    	end {
    		$xmlFilePrefix = Join-Path $Path $Prefix
    		$suffix = "$targetLanguage.xml"
    
    		$masterXmlFle = $xmlFilePrefix + "-master-" + $suffix
    		$coreXmlFle = $xmlFilePrefix + "-core-" + $suffix
    
    		if ($sitecoreMaster.HasChildNodes) {
    			$xmlMaster.Save($masterXmlFle)
    			Write-Host Wrote $sitecoreMaster.ChildNodes.Count phrases to $masterXmlFle -ForegroundColor Green
    		}
    
    		if ($sitecoreCore.HasChildNodes) {
    			$xmlCore.Save($coreXmlFle)
    			Write-Host Wrote $sitecoreCore.ChildNodes.Count phrases to $coreXmlFle -ForegroundColor Green
    		}
    	}
    }
    
    function Get-ItemsFromUnicornConfiguration {
    	[CmdletBinding()]
    	param(
    		[Parameter(Mandatory = $true,Position = 0)]
    		[ValidateNotNullOrEmpty()]
    		[string]$ConfigurationName
    	)
    
    	$source = Get-UnicornConfiguration $ConfigurationName | New-UnicornItemSource
    
    	return $source.Entries | % { [Sitecore.Install.Items.ItemKeyUtils]::Resolve($_) | Wrap-Item }
    }
    
    #
    # Base translation file
    #
    
    $configurations = @(
    	"Spe.Core",
    	"Spe.Rules"
    )
    
    $allItems = @()
    foreach ($configName in $configurations)
    {
    	$items = Get-ItemsFromUnicornConfiguration $configName
    	$allItems += $items
    
    	Write-Host Added $configName with $($items.Count) items
    }
    
    $allItems | Write-TranslationFile -Path $translationsFolder -Prefix "spe-translation"
    
    #
    # Scripts translation file
    #
    
    $allItems = Get-ItemsFromUnicornConfiguration "Spe.Scripts"
    Write-Host Added "Spe.Scripts" with $($allItems.Count) items
    $allItems | Write-TranslationFile -Path $translationsFolder -Prefix "spe-translation-scripts"
    
    #
    # Authorable Reports translation file
    #
    
    $allItems = Get-ItemsFromUnicornConfiguration "Spe.AuthorableReports"
    Write-Host Added "Spe.AuthorableReports" with $($allItems.Count) items
    $allItems | Write-TranslationFile -Path $translationsFolder -Prefix "spe-translation-authorable-reports"
    
    Write-Host "Done."
Languages:
- Language: "de-DE"
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20190108T221016Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "08972874-abbe-4090-b6ac-7b8d181dbb01"
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20160823T191415
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "07e5dd6f-0957-4304-9063-760f2430c450"
